Transform: AWS::Serverless-2016-10-31

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /signin:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignIn.Arn}/invocations
              responses: {}
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        username:
                          type: string
                        password:
                          type: string
                          minLength: 8
                      required:
                        - username
                        - email
                        - password
          /signin/refresh:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RefreshToken.Arn}/invocations
              responses: {}
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        refresh_token:
                          type: string
          /signup:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignUp.Arn}/invocations
              responses: {}
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        username:
                          type: string
                        email:
                          type: string
                          format: email
                        password:
                          type: string
                          minLength: 8
                      required:
                        - username
                        - email
                        - password
          /confirm:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Confirm.Arn}/invocations
              responses: {}
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        username:
                          type: string
                        verification_code:
                          type: string
          /score:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Score.Arn}/invocations
              responses: {}
              security:
                - MyCognitoAuthorizer:
                    - aws.cognito.signin.user.admin
#              à remplacer par ça quand ça fonctionnera : https://github.com/aws-amplify/amplify-js/issues/3732
#                    - fromagerie-virtuelle/score
          /result:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendResult.Arn}/invocations
              responses: {}
              security:
                - MyCognitoAuthorizer:
                    - aws.cognito.signin.user.admin
#              à remplacer par ça quand ça fonctionnera : https://github.com/aws-amplify/amplify-js/issues/3732
#                    - fromagerie-virtuelle/result
      Auth:
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt AccessLogGroup.Arn
        Format: "{\"requestId\":\"$context.requestId\",\"ip\":\"$context.identity.sourceIp\",\"user\":\"$context.authorizer.principalId\",\"method\":\"$context.httpMethod\",\"path\":\"$context.resourcePath\",\"status\":\"$context.status\",\"responseLength\":\"$context.responseLength\",\"responseLatency\":\"$context.responseLatency\",\"protocol\":\"$context.protocol\",\"userAgent\":\"$context.identity.userAgent\",\"requestTime\":\"$context.requestTime\",\"domainName\":\"$context.domainName\",\"apiId\":\"$context.apiId\"}"

  AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}
      RetentionInDays: 3

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireUppercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      AllowedOAuthScopes: # pour le moment ça ne fonctionne pas : https://github.com/aws-amplify/amplify-js/issues/3732
        - fromagerie-virtuelle/score
        - fromagerie-virtuelle/result

  MyResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      UserPoolId: !Ref UserPool
      Identifier: fromagerie-virtuelle
      Name: fromagerie-virtuelle
      Scopes: # pour le moment ça ne fonctionne pas : https://github.com/aws-amplify/amplify-js/issues/3732
        - ScopeName: score
          ScopeDescription: reach score endpoint
        - ScopeName: result
          ScopeDescription: reach result endpoint

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: fromagerie-virtuelle-datalake
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3

  S3BucketPublic:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: fromagerie-virtuelle-datalake-public

  PublicObjectPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketPublic
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:ListBucket'
            Effect: Allow
            Resource:
              - !GetAtt S3BucketPublic.Arn
            Principal: '*'
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${S3BucketPublic}/data/commands/year=2021/*
              - !Sub arn:${AWS::Partition}:s3:::${S3BucketPublic}/data/commands/year=2022/*
              - !Sub arn:${AWS::Partition}:s3:::${S3BucketPublic}/data/commands/year=2023/*
            Principal: '*'

  S3BucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              - !GetAtt S3Bucket.Arn
              - !Sub ${S3Bucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'

  SendResult:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: SendResult
      CodeUri: fromagerie_virtuelle_send_result_function
      Handler: app.lambda_handler
      Runtime: python3.8
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          PLAYERS_ANSWERS_BUCKET_NAME: !Ref S3Bucket
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${S3Bucket}
                - !Sub arn:${AWS::Partition}:s3:::${S3Bucket}/*
      Events:
        ApiPOSTresult:
          Type: Api
          Properties:
            Path: /result
            Method: POST
            RestApiId: !Ref Api

  SendResultLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SendResult}
      RetentionInDays: 3

  SignUp:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: SignUp
      CodeUri: fromagerie_virtuelle_sign_function
      Handler: app.lambda_handler_signup
      Runtime: python3.8
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ApiPOSTsignup:
          Type: Api
          Properties:
            Path: /signup
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !Ref UserPool
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminConfirmSignUp
              Resource:
                - !GetAtt UserPool.Arn

  RefreshToken:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: RefreshToken
      CodeUri: fromagerie_virtuelle_sign_function
      Handler: app.lambda_handler_refresh
      Runtime: python3.8
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ApiPOSTsignup:
          Type: Api
          Properties:
            Path: /signin/refresh
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !Ref UserPool

  SignIn:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: SignIn
      CodeUri: fromagerie_virtuelle_signin_function/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Architectures:
        - x86_64
      Events:
        ApiPOSTsignup:
          Type: Api
          Properties:
            Path: /signin
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !Ref UserPool
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts

  Confirm:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: Confirm
      CodeUri: fromagerie_virtuelle_sign_function
      Handler: app.lambda_handler_confirm
      Runtime: python3.8
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ApiPOSTsignup:
          Type: Api
          Properties:
            Path: /confirm
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !Ref UserPool

  SignUpLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SignUp}
      RetentionInDays: 3

  Score:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: Score
      CodeUri: fromagerie_virtuelle_get_score_function
      Handler: app.lambda_handler
      Runtime: python3.8
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          GAME_TABLE_NAME: !Ref GameTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GameTable
      Events:
        ApiGETscore:
          Type: Api
          Properties:
            Path: /score
            Method: GET
            RestApiId: !Ref Api

  ScoreLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Score}
      RetentionInDays: 3

  GameTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-FromagerieVirtuelleTable
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: N
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

Outputs:
  UserPoolId:
    Description: "ID of the Cognito User Pool"
    Value: !Ref UserPool
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolId'
  CognitoClientId:
    Description: "ID of the Cognito User Pool Client"
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub '${AWS::StackName}-CognitoClientId'
  FromagerieVirtuelleS3Bucket:
    Description: "Datalake"
    Value: !Ref S3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'
  FromagerieVirtuelleDynamoDBArn:
    Description: "DynamoDB ARN for score"
    Value: !GetAtt GameTable.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBArn'
  FromagerieVirtuelleDynamoDBName:
    Description: "DynamoDB name for score"
    Value: !Ref GameTable
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBName'
