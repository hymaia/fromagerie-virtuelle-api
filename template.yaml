AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  fromagerie-virtuelle-api

  Sample SAM Template for fromagerie-virtuelle-api

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  CognitoUserEmail:
    Default: franck.cussac@hymaia.com
    Description: Email address of the created user
    Type: String
  KMSAdminAccountId:
    Default: franck.cussac@hymaia.com
    Description: IAM user entitled to be admin of the KMS Key
    Type: String

Resources:
  FromagerieVirtuelleGetYearDataFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: fromagerie_virtuelle_get_data_function
      Handler: app.get_last_year_data
      Runtime: python3.8
      MemorySize: 256
      Timeout: 900
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: get
            Path: /data
            RestApiId: !Ref FromagerieVirtuelleApi
            Auth:
              Authorizer: CognitoAuthorizer
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - xray:PutTraceSegments
                - xray:PutTelemetryRecords
              Resource:
                - '*'
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: !GetAtt GameEventBus.Arn
            - Effect: Allow
              Action:
                - 'kms:Decrypt'
              Resource: !GetAtt KMSKey.Arn
            - Effect: Allow
              Action:
                - 's3:*'
              Resource: !GetAtt S3Bucket.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3Bucket

  FromagerieVirtuelleSendDataFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: fromagerie_virtuelle_send_data_function
      Handler: app.lambda_handler
      Runtime: python3.8
      MemorySize: 256
      Timeout: 900
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /answer
            RestApiId: !Ref FromagerieVirtuelleApi
            Auth:
              Authorizer: CognitoAuthorizer
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - xray:PutTraceSegments
                - xray:PutTelemetryRecords
              Resource:
                - '*'
            - Effect: Allow
              Action:
                - logs:*
              Resource:
                - '*'
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource:
                - !GetAtt GameTable.Arn
                - !Join
                  - "/"
                  - - !GetAtt GameTable.Arn
                    - "*"
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: !GetAtt GameEventBus.Arn
            - Effect: Allow
              Action:
                - 'kms:Decrypt'
              Resource: !GetAtt KMSKey.Arn
            - Effect: Allow
              Action:
                - 's3:*'
              Resource: !GetAtt S3Bucket.Arn
      Environment:
        Variables:
          PLAYERS_ANSWERS_BUCKET_NAME: !Ref S3Bucket
          GAME_TABLE_NAME: !Ref GameTable

  FromagerieVirtuelleGetScoreFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: fromagerie_virtuelle_get_score_function
      Handler: app.lambda_handler
      Runtime: python3.8
      MemorySize: 256
      Timeout: 900
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: get
            Path: /score
            RestApiId: !Ref FromagerieVirtuelleApi
            Auth:
              Authorizer: CognitoAuthorizer
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - xray:PutTraceSegments
                - xray:PutTelemetryRecords
              Resource:
                - '*'
            - Effect: Allow
              Action:
                - logs:*
              Resource:
                - '*'
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource:
                - !GetAtt GameTable.Arn
                - !Join
                  - "/"
                  - - !GetAtt GameTable.Arn
                    - "*"
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: !GetAtt GameEventBus.Arn
            - Effect: Allow
              Action:
                - 'kms:Decrypt'
              Resource: !GetAtt KMSKey.Arn
      Environment:
        Variables:
          GAME_TABLE_NAME: !Ref GameTable

  GameEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub ${AWS::StackName}-EventBus

  GameTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-FromagerieVirtuelleTable
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
        - AttributeName: GSI2PK
          AttributeType: S
        - AttributeName: GSI2SK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI2
          KeySchema:
            - AttributeName: GSI2PK
              KeyType: HASH
            - AttributeName: GSI2SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref KMSKey

  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS CMK
      KeyPolicy:
        Version: '2012-10-17'
        Id: kms-key-policy
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:user/${KMSAdminAccountId}
            Action:
              - 'kms:*'
            Resource: '*'
          - Sid: Allow cicd access to the key
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:user/github-action
            Action:
              - 'kms:*'
            Resource: '*'
          - Sid: Allow use of the key for specific services in this account
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
              - 'kms:CreateGrant'
            Resource: '*'
            Condition:
              StringEquals:
                kms:CallerAccount: !Ref AWS::AccountId
                kms:ViaService:
                  - !Sub s3.${AWS::Region}.amazonaws.com
                  - !Sub dynamodb.${AWS::Region}.amazonaws.com
                  - !Sub kinesis.${AWS::Region}.amazonaws.com
                  - !Sub secretsmanager.${AWS::Region}.amazonaws.com
                  - !Sub sqs.${AWS::Region}.amazonaws.com
  
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub ${AWS::StackName}-datalake

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: FromagerieVirtuelleUserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      AccountRecoverySetting:
        RecoveryMechanisms: 
          - Name: verified_email
            Priority: 1
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      Schema:
        - AttributeDataType: String
          Name: name
          Required: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH

  UserPoolUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      DesiredDeliveryMediums:
        - EMAIL
      Username: !Ref CognitoUserEmail
      UserPoolId: !Ref UserPool
  
  FromagerieVirtuelleApi:
    DependsOn: UserPool
    Type: AWS::Serverless::Api
    Properties:
      Name: FromagerieVirtuelleApi
      StageName: "dev"
      Cors: "'*'"
      Auth:
        Authorizers:
            CognitoAuthorizer:
              UserPoolArn: !GetAtt "UserPool.Arn"

Outputs:
  UserPoolId:
    Description: "ID of the Cognito User Pool"
    Value: !Ref UserPool
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolId'
  CognitoClientId:
    Description: "ID of the Cognito User Pool Client"
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub '${AWS::StackName}-CognitoClientId'
  FromagerieVirtuelleGetYearDataApi:
    Description: "API Gateway endpoint URL for GET data"
    Value: !Sub "https://${FromagerieVirtuelleApi}.execute-api.${AWS::Region}.amazonaws.com/dev/data/"
    Export:
      Name: !Sub '${AWS::StackName}-GetYearDataApi'
  FromagerieVirtuelleSendDataApi:
    Description: "API Gateway endpoint URL for POST answers"
    Value: !Sub "https://${FromagerieVirtuelleApi}.execute-api.${AWS::Region}.amazonaws.com/dev/answer/"
    Export:
      Name: !Sub '${AWS::StackName}-SendDataApi'
  FromagerieVirtuelleS3Bucket:
    Description: "Datalake"
    Value: !Ref S3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'
  FromagerieVirtuelleDynamoDBArn:
    Description: "DynamoDB ARN for score"
    Value: !GetAtt GameTable.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBArn'
  FromagerieVirtuelleDynamoDBName:
    Description: "DynamoDB name for score"
    Value: !Ref GameTable
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBName'
